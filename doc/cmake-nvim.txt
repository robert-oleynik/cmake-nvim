*cmake-nvim.txt* CMake integration for Neovim.

CONTENTS                                                   *cmake-nvim-contents*

Introduction        |cmake-nvim-introduction|
Install             |cmake-nvim-install|
Usage               |cmake-nvim-usage|
Configure Project   |cmake-nvim-settings-json|
Commands            |cmake-nvim-commands|

================================================================================
Introduction                                           *cmake-nvim-introduction*

cmake-nvim integrates [cmake](https://cmake.org/) into 
[neovim](https://neovim.io/). Using this plugin user can configure and build
projects, define multiple cmake configurations and switch between build types.
This plugin is inspired by `vector-of-bool`'s 
[CMake Tools](https://github.com/microsoft/vscode-cmake-tools) for `vscode`

================================================================================
Install                                                     *cmake-nvim-install*

Install with [vim-plug](https://github.com/junegunn/vim-plug)

    Plug 'robert-oleynik/cmake-nvim'

================================================================================
Usage                                                         *cmake-nvim-usage*

For using cmake-nvim a `settings.json` file is required. This file is used to
store the configurations. The `settings.json` file is located in the project's
root directory next to the `CMakeLists.txt` file.

Project structure:

    project_name
      ├─ ...
      ├─ CMakeLists.txt
      └─ settings.json

Example `settings.json` file:
```json
{
    "cmake": {
        "configurations": [
            {
                "name": "clang",
                "build_dir": "./build/%name%/%build_type%",
                "definitions": {
                    "CMAKE_C_COMPILER": "clang",
                    "CMAKE_CXX_COMPILER": "clang++"
                }
            }
        ]
    }
}
```

To configure cmake run:

    :CMakeConfigure

To build the project run:

    :CMakeBuild

To clean config directory run:

    :CMakeClean

To edit `settings.json` file run:

    :CMakeOpenSettings

================================================================================
CONFIGURE PROJECT                                     *cmake-nvim-settings-json*

A cmake project is configured using the local `settings.json` file. 

FIELDS                                         *cmake-nvim-settings-json-fields*

`cmake.bin`                                               *cmake-nvim-field-bin*

    Used to set the path to cmake binary file. Default: 'cmake'

`cmake.configurations`                         *cmake-nvim-field-configurations*

    Used to set a list of configurations. At least one configuration is required
    for usage.

CONFIGURATION FIELDS                                  *cmake-nvim-config-fields*

`config.build_args`                         *cmake-nvim-field-config-build-args*

    List of arguments passed after `cmake --build <build_dir>`. Configure
    project if build dir doesn't contain `CMakeCache.txt` file

`config.build_dir`                           *cmake-nvim-field-config-build-dir*

    Specifies cmake's build directory (Note: the path is passed using
    `cmake -B <build_dir>`). Default: "./build"

    Replace the strings:
        `%name%`        with `config.name`
        `%build_type%`  with `config.build_type`

`config.build_type`                         *cmake-nvim-field-config-build-type*

    Specifies cmake's build type. If not specified the user cas switch between
    build types using :CMakeSelectBuildType. (Note: passed using
    `cmake -DCMAKE_BUILD_TYPE=<build_type>)

    Possible values: "Debug", "Release", "RelWithDebSym", "MinSizeRel"

`config.config_args`                             *cmake-nvim-field-config-args*

    List of arguments passed to cmake during configuration.

`config.definitions`                             *cmake-nvim-field-definitions*

    List of keys and values passed to cmake during configuration. Use
    true and false for cmake booleans.

    Example:
        ...
        "definitions": {
            "SOME_STRING": "value",
            "SOME_BOOL": true,
            "SOME_NUMBER": 42
        }
        ...
        Runs: cmake ... -DSOME_STRING="value" -DSOME_BOOL=ON -DSOME_NUMBER=42

`config.generator`                         *cmake-nvim-field-config-generators*

    Specifies cmake's build system generator. (Note: Passed using
    `cmake -G <generator>`)

    Possible values: "Ninja", "Unix Makefiles", ...
    (See https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html)

`config.compile_commands_link`   *cmake-nvim-field-config-compile_commands_link*

    Specifies the path were to link `compile_commands.json` file to. If set
    the flag -DCMAKE_ENABLE_COMPILE_COMMANDS=ON is added to configuration.

`config.name`                                     *cmake-nvim-field-config-name*

    Sets the name of the configuration. This field is required and used to
    identify the configuration.

================================================================================
COMMANDS                                                   *cmake-nvim-commands*

:CMakeConfigure                                                *:CMakeConfigure*

    Run CMake to configure project. Uses current selected config. If no config
    is selected, the first config is used. Opens quickfix on error.

:CMakeBuild [<target>]                                             *:CMakeBuild*

    Run CMake to build project. Uses current selected config. If no config is
    selected, the first config is used. Opens quickfix on error. If target is
    specified cmake only builds this target (Note: adds option 
    `--target <target>`).

:CMakeClean                                                        *:CMakeClean*

    Remove all built objects and other output files from build directory.

:CMakeClear                                                        *:CMakeClear*

    Remove all files from current build directory. The directory is specified
    by selected config. If no config is selected, the first config is used.

:CMakeOpenSettings                                          *:CMakeOpenSettings*

    Start edit `settings.json` file.

:CMakeLoadSettings                                          *:CMakeLoadSettings*

    Reload `settings.json`. Resets the build type and selected config (Note: 
    The `settings.json` fill will be reloaded on file save and root directory
    changes)

:CMakePrintBuildType                                      *:CMakePrintBuildType*

    Prints current cmake build type.

:CMakePrintConfig                                            *:CMakePrintConfig*

    Prints name of selected configuration.

:CMakeSelectBuildType [<build_type>]                     *:CMakeSelectBuildType*

    Sets current cmake build type. If not build type is specified, a dialog for
    selection is opened.

:CMakeSelectConfig [<config_name>]                          *:CMakeSelectConfig*

    Set current config name. If no name is specified, a dialog for selection is
    opened.
